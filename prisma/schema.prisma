datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  passwordHash   String
  role           String    @default("USER")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  assignments    ProductAssignment[]

  @@map("users")
}

model Branch {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  products  Product[]
  employees Employee[]

  @@map("branches")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[]

  @@map("categories")
}

model Employee {
  id           Int       @id @default(autoincrement())
  empId        String    @unique
  name         String
  email        String?
  department   String?
  position     String?
  branchId     Int?
  branch       Branch?   @relation(fields: [branchId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  assignments  ProductAssignment[]

  @@map("employees")
}

model Department {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[]

  @@map("departments")
}

model Product {
  id               Int       @id @default(autoincrement())
  name             String
  model            String
  categoryId       Int
  category         Category  @relation(fields: [categoryId], references: [id])
  branchId         Int
  branch           Branch    @relation(fields: [branchId], references: [id])
  departmentId     Int?
  department       Department? @relation(fields: [departmentId], references: [id])
  warrantyDate     DateTime?
  complianceStatus Boolean   @default(false)
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?
  assignments      ProductAssignment[]

  @@map("products")
}

model ProductAssignment {
  id               Int       @id @default(autoincrement())
  productId        Int
  product          Product   @relation(fields: [productId], references: [id])
  employeeId       Int
  employee         Employee  @relation(fields: [employeeId], references: [id])
  assignedById     Int
  assignedBy       User      @relation(fields: [assignedById], references: [id])
  assignedAt       DateTime  @default(now())
  returnedAt       DateTime?
  expectedReturnAt DateTime?
  status           String    @default("ASSIGNED")
  condition        String?
  notes            String?
  deletedAt        DateTime?

  // Ensure only one active assignment per product
  @@unique([productId, returnedAt])

  @@map("product_assignments")
}